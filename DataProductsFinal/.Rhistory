confusionMatrix(p_rp,  test$classe)$overall[1]
fancyRpartPlot(fit_rpart$finalModel)
??fancyRpartPlot
library(rattle)
fancyRpartPlot(fit_rpart$finalModel)
library(rpart)
fancyRpartPlot(fit_rpart$finalModel)
rpart::plotcp(fit_rpart)
rpart::plotcp(fit_rpart$finalModel)
rpart::plotcp(fit_rpart$results)
str(fit_rpart)
fit_rpart$finalModel
class(fit_rpart$finalModel)
fancyRpartPlot(fit_rpart$finalModel)
?rpart.plot
??rpart.plot
rattle::rattle.print.summary.multinom(fit_rpart$finalModel,digits=3)
gc()
library(caretEnsemble)
library(caretEnsamble)
install.packages("caretEnsemble")
library(caretEnsemble)
caretList(trControl=control)
caretList(trControl=control, tuneList = c(fit_rpart, m_rf, m_gbm, m_lda))
models = c(fit_rpart, m_rf, m_gbm, m_lda)
caretEnsemble(models)
control <- trainControl(method="repeatedcv", number=10, repeats=3, savePredictions=TRUE, classProbs=TRUE)
algorithmList <- c('lda', 'rpart', 'glm', 'knn', 'svmRadial')
set.seed(5304)
models <- caretList(Class~., data=train_df, trControl=control, methodList=algorithmList)
models <- caretList(classe~., data=train_df, trControl=control, methodList=algorithmList)
warnings()
control <- trainControl(method="repeatedcv", number=10, repeats=3, savePredictions=TRUE, classProbs=TRUE)
algorithmList <- c('lda', 'rpart', 'gbm', 'knn', 'svmRadial')
set.seed(5304)
models <- caretList(classe~., data=train_df, trControl=control, methodList=algorithmList)
models
summary(models)
results <- resamples(models)
summary(results)
dotplot(results)
modelCor(results)
modelCor(na.omit(results))
str(results)
?modelCor
sort(results, FUN=mean, na.rm=TRUE
)
sort(results, FUN=mean)
sort(results, FUN=mean, na.rm=TRUE)
modelCor(results, metric="accuracy")
modelCor(results, metric="Accuracy")
modelCor(results, metric="Kappa")
results$values
apply(results, 2, function(x){sapply(x,ifelse(is.na(x),0,x))})
apply(results, 2, function(x){lapply(x,ifelse(is.na(x),0,x))})
apply(results$values, 2, function(x){lapply(x,ifelse(is.na(x),0,x))})
apply(results$values, 2, FUN=function(x)lapply(x,ifelse(is.na(x),0,x)))
apply(results$values, 2, FUN=function(x)lapply(x,function(y)ifelse(is.na(y),0,y)))
apply(results$values, 2, FUN=function(x)sapply(x,function(y)ifelse(is.na(y),0,y)))
apply(results$values, 2, FUN=function(x)sapply(x,function(y)ifelse(is.na(y),0L,as.numeric(y)))
)
apply(results$values[1,10], 2, FUN=function(x)sapply(x,function(y)ifelse(is.na(y),0L,as.numeric(y)))
)
apply(results$values, 2, FUN=function(x)sapply(x,function(y)ifelse(is.na(y),0L,as.numeric(y))))
xx <- apply(results$values, 2, FUN=function(x)sapply(x,function(y)ifelse(is.na(y),0L,as.numeric(y))))
modelCor(xx)
pairs(xx)
modelCor(results)
splom(results)
stackControl <- trainControl(method="repeatedcv", number=10, repeats=3, savePredictions=TRUE, classProbs=TRUE)
set.seed(786)
stack.glm <- caretStack(models, method="glm", metric="Accuracy", trControl=stackControl)
print(stack.glm)
stack.glm <- caretStack(models, method="rf", metric="Accuracy", trControl=stackControl)
check_caretList_model_types(models)
caretEnsemble::check_caretList_model_types(models)
stack.glm <- caretStack(models, method="rpart", metric="Accuracy", trControl=stackControl)
?caretStack
confusionMatrix(p_rp,  train_df$classe)$overall[1]
confusionMatrix(p_rf,  train_df$classe)$overall[1]
confusionMatrix(p_gbm, train_df$classe)$overall[1]
confusionMatrix(p_lda, train_df$classe)$overall[1]
print(models[1])
preds <- lapply(models, function(x)predict(x, test))
preds
stackControl <- trainControl(method="cv", number=10, savePredictions=TRUE, classProbs=TRUE)
stack.glm <- caretStack(models, method="rpart", metric="Accuracy", trControl=stackControl)
stack.glm <- caretStack(models, method="rpart", metric="Accuracy")
stack.glm <- caretStack(models)
ensemble <- caretEnsemble(models)
ensemble <- caretEnsemble(models[3:5])
summary(models)
mod1 <- models[3,4,5]
mod1 <- models[3:5]
ensemble <- caretEnsemble(mod1)
summary(mod1)
str(mod1)
fancyRpartPlot(m_rf)
fancyRpartPlot(m_rf$finalModel)
print(models)
print(models$rpart)
print(models$lda)
print(models$svmRadial)
str(models$svmRadial)
models$rpart$modelType
models$lda$modelType
models$gbm$modelType
models$svmRadial$modelType
models$rpart$modelType
models$rf$modelType
models$rf$resamples
models$resamples
models$resample
models$rpart$resample
models$rf$resamples$accuracy
models$rf$resamples$Accuracy
models$rf$resample$Accuracy
models$rpart$resample$Accuracy
summary(models$rpart$resample$Accuracy)
summary(models$gbm$resample$Accuracy)
summary(models$svmRadial$resample$Accuracy)
preds
preds_train <- lapply(models, function(x)predict(x, train_df))
head(preds)
summary(preds)
summary(preds_train)
stackdf <- data.frame(preds_train, classe = train_df$classe)
head(stackdf)
rf_fit <- train(classe ~ ., method = "rf", data = stackdf)
summary(results)
models$gbm$results$Accuracy
mean(models$gbm$results$Accuracy)
summary(models$gbm$resample$Accuracy)
mean(models$gbm$resample$Accuracy)
mean(models$gbm$resample$Accuracy)*100
dotplot(results)
splom(results)
sample(1:nrow(train_df))
sample(1:nrow(train_df), size = 60)
validClassSample <- train_df[sample(1:nrow(train_df), size=60),"classe"]
validClassSample
StackSample <- train_df[sample(1:nrow(train_df), size=60),]
StackSample
stackSample <- train_df[sample(1:nrow(train_df), size=60),]
stackPreds <- lapply(models, function(x)predict(x, stackSample))
stackControl <- trainControl(method="cv", number=10, savePredictions=TRUE, classProbs=TRUE)
stackSample$classe
stackDf <- data.frame(stackPreds, classe = stackSample$classe)
rf_fit <- train(classe ~ ., method = "rf", data = stackDf)
new_p <- predict(rf_fit, stackdf)
new_p
new_p <- predict(rf_fit, stackDf)
rf_fit
stackSample <- train_df[sample(1:nrow(train_df), size=100),]
stackPreds <- lapply(models, function(x)predict(x, stackSample))
stackDf <- data.frame(stackPreds, classe = stackSample$classe)
rf_fit <- train(classe ~ ., method = "rf", data = stackDf)
print(rf_fit)
accuracy(rf_fit)
accuracy(rf_fit$finalModel)
Accuracy(rf_fit$finalModel)
forecast::accuracy(rf_fit)
str(rf_fit)
rf_fit$resample$Accuracy
mean(rf_fit$resample$Accuracy)
finalSubPreds <- data.frame(lapply(models, function(x)predict(x, test)))
finalSubPreds
predict(rf_fit, finalSubPreds)
summary(train)
train <- read.csv("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv", stringsAsFactors = FALSE, row.names = "X", na.strings = c("NA", ""))
summary(train)
summary(as.factor(train$amplitude_yaw_dumbbell))
train <- read.csv("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv", stringsAsFactors = FALSE, row.names = "X", na.strings = c("NA", "","#DIV/0!"))
summary(as.factor(train$amplitude_yaw_dumbbell))
vars <- dim(train)[2]
vars
class_var <- train[,"classe"]
nzv <- nearZeroVar(train[,1:158], saveMetrics = TRUE )
library(caret, warn.conflicts = FALSE, quietly = TRUE)
class_var <- train[,"classe"]
nzv <- nearZeroVar(train[,1:158], saveMetrics = TRUE )
train_nzv <- train[c(rownames(nzv[nzv$nzv ==FALSE,])) ]
dim(train_nzv)
summary(train_nzv)
nzv
str(train_nzv)
har_data <- read.csv("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv", stringsAsFactors = FALSE, row.names = "X", na.strings = c("NA", "","#DIV/0!"))
test <- read.csv("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv", stringsAsFactors = FALSE, row.names = "X", na.strings = c("NA","","#DIV/0!"))
raw_predictors <- har_data[,7:158]
response <- train[,159]
str(raw_predictors)
str(response)
predictors <- raw_predictors[ , apply(raw_predictors, 2,
function(x) !any(is.na(x)))]
str(predictors)
dim(predictors)
predictors_nzv <- raw_predictors[ , apply(raw_predictors, 2,
function(x) !any(is.na(x)))]
nzv <- nearZeroVar(predictors_nzv, saveMetrics = TRUE )
nzv
predictors <- predictors_nzv[c(rownames(nzv[nzv$nzv ==FALSE,])) ]
dim(predictors)
control <- trainControl(method="repeatedcv", number=10, repeats=3, classProbs=TRUE)
algorithmList <- c('lda', 'gbm', 'knn', 'svmRadial')
set.seed(5304)
models <- caretList(response~predictors, trControl=control, methodList=algorithmList)
knitr::opts_chunk$set(echo = TRUE)
library(caret, warn.conflicts = FALSE, quietly = TRUE)
library(caretEnsemble, warn.conflicts = FALSE, quietly = TRUE)
library(MASS, warn.conflicts = FALSE, quietly = TRUE)
library(gbm, warn.conflicts = FALSE, quietly = TRUE)
library(splines, warn.conflicts = FALSE, quietly = TRUE)
library(plyr, warn.conflicts = FALSE, quietly = TRUE)
library(randomForest, warn.conflicts = FALSE, quietly = TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(caret, warn.conflicts = FALSE, quietly = TRUE)
library(caretEnsemble, warn.conflicts = FALSE, quietly = TRUE)
library(survival, warn.conflicts = FALSE, quietly = TRUE)
library(MASS, warn.conflicts = FALSE, quietly = TRUE)
library(gbm, warn.conflicts = FALSE, quietly = TRUE)
library(splines, warn.conflicts = FALSE, quietly = TRUE)
library(plyr, warn.conflicts = FALSE, quietly = TRUE)
library(randomForest, warn.conflicts = FALSE, quietly = TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(caret, warn.conflicts = FALSE, quietly = TRUE)
library(caretEnsemble, warn.conflicts = FALSE, quietly = TRUE)
library(survival, warn.conflicts = FALSE, quietly = TRUE)
library(MASS, warn.conflicts = FALSE, quietly = TRUE)
library(gbm, warn.conflicts = FALSE, quietly = TRUE)
library(splines, warn.conflicts = FALSE, quietly = TRUE)
library(plyr, warn.conflicts = FALSE, quietly = TRUE)
library(randomForest, warn.conflicts = FALSE, quietly = TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(caret, warn.conflicts = FALSE, quietly = TRUE)
library(caretEnsemble, warn.conflicts = FALSE, quietly = TRUE)
library(survival, warn.conflicts = FALSE, quietly = TRUE)
library(MASS, warn.conflicts = FALSE, quietly = TRUE)
library(gbm, warn.conflicts = FALSE, quietly = TRUE)
library(splines, warn.conflicts = FALSE, quietly = TRUE)
library(plyr, warn.conflicts = FALSE, quietly = TRUE)
library(randomForest, warn.conflicts = FALSE, quietly = TRUE)
gc()
knitr::opts_chunk$set(echo = TRUE)
library(caret, warn.conflicts = FALSE, quietly = TRUE)
library(caretEnsemble, warn.conflicts = FALSE, quietly = TRUE)
library(survival, warn.conflicts = FALSE, quietly = TRUE)
library(MASS, warn.conflicts = FALSE, quietly = TRUE)
library(gbm, warn.conflicts = FALSE, quietly = TRUE)
library(splines, warn.conflicts = FALSE, quietly = TRUE)
library(plyr, warn.conflicts = FALSE, quietly = TRUE)
library(randomForest, warn.conflicts = FALSE, quietly = TRUE)
har_data <- read.csv("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv", stringsAsFactors = FALSE, row.names = "X", na.strings = c("NA", "","#DIV/0!"))
test <- read.csv("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv", stringsAsFactors = FALSE, row.names = "X", na.strings = c("NA","","#DIV/0!"))
raw_predictors <- har_data[,7:158]
response <- train[,159]
predictors_nzv <- raw_predictors[ , apply(raw_predictors, 2,
function(x) !any(is.na(x)))]
nzv <- nearZeroVar(predictors_nzv, saveMetrics = TRUE )
predictors <- predictors_nzv[c(rownames(nzv[nzv$nzv ==FALSE,])) ]
# remove the identifiers and dates from prediction vars
control <- trainControl(method="repeatedcv", number=10, repeats=3, classProbs=TRUE)
algorithmList <- c('lda', 'gbm', 'knn', 'svmRadial')
set.seed(5304)
models <- caretList(response~predictors, trControl=control, methodList=algorithmList)
results <- resamples(models)
df <- data.frame(classe=response, predictors)
response <- train[,159]
response <- har_data[,159]
raw_predictors <- har_data[,7:158]
knitr::opts_chunk$set(echo = TRUE)
library(caret, warn.conflicts = FALSE, quietly = TRUE)
library(caretEnsemble, warn.conflicts = FALSE, quietly = TRUE)
library(survival, warn.conflicts = FALSE, quietly = TRUE)
library(MASS, warn.conflicts = FALSE, quietly = TRUE)
library(gbm, warn.conflicts = FALSE, quietly = TRUE)
library(splines, warn.conflicts = FALSE, quietly = TRUE)
library(plyr, warn.conflicts = FALSE, quietly = TRUE)
library(randomForest, warn.conflicts = FALSE, quietly = TRUE)
har_data <- read.csv("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv", stringsAsFactors = FALSE, row.names = "X", na.strings = c("NA", "","#DIV/0!"))
test <- read.csv("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv", stringsAsFactors = FALSE, row.names = "X", na.strings = c("NA","","#DIV/0!"))
raw_predictors <- har_data[,7:158]
response <- har_data[,159]
predictors_nzv <- raw_predictors[ , apply(raw_predictors, 2,
function(x) !any(is.na(x)))]
nzv <- nearZeroVar(predictors_nzv, saveMetrics = TRUE )
predictors <- predictors_nzv[c(rownames(nzv[nzv$nzv ==FALSE,])) ]
control <- trainControl(method="repeatedcv", number=10, repeats=3, classProbs=TRUE)
algorithmList <- c('lda', 'gbm', 'knn', 'svmRadial')
set.seed(5304)
df <- data.frame(classe=response, predictors)
models <- caretList(classe~. data=df, trControl=control, methodList=algorithmList)
results <- resamples(models)
control <- trainControl(method="repeatedcv", number=10, repeats=3, classProbs=TRUE)
algorithmList <- c('lda', 'gbm', 'knn', 'svmRadial')
set.seed(5304)
df <- data.frame(classe=response, predictors)
models <- caretList(classe~., data=df, trControl=control, methodList=algorithmList)
gc()
gc(reset=T)
gc()
control <- trainControl(method="cv", number=5, classProbs = TRUE)
gc()
knitr::opts_chunk$set(echo = TRUE)
library(caret, warn.conflicts = FALSE, quietly = TRUE)
library(caretEnsemble, warn.conflicts = FALSE, quietly = TRUE)
library(survival, warn.conflicts = FALSE, quietly = TRUE)
library(MASS, warn.conflicts = FALSE, quietly = TRUE)
library(gbm, warn.conflicts = FALSE, quietly = TRUE)
library(splines, warn.conflicts = FALSE, quietly = TRUE)
library(plyr, warn.conflicts = FALSE, quietly = TRUE)
library(randomForest, warn.conflicts = FALSE, quietly = TRUE)
har_data <- read.csv("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv", stringsAsFactors = FALSE, row.names = "X", na.strings = c("NA", "","#DIV/0!"))
test <- read.csv("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv", stringsAsFactors = FALSE, row.names = "X", na.strings = c("NA","","#DIV/0!"))
raw_predictors <- har_data[,7:158]
response <- har_data[,159]
predictors_nzv <- raw_predictors[ , apply(raw_predictors, 2,
function(x) !any(is.na(x)))]
install.packages("plotly"")
""
install.packages("plotly")
setwd("~/GitHub/Developing_Data_Products/plotly")
setwd("~/GitHub/Developing_Data_Products")
install.packages("webshot")
names(mtcars)
library(plotly)
q <- qplot(x=hp, y=disp, data=mtcars)
plot(q)
qplot(x=hp, y=disp, data=mtcars)
# Chunk 1: sum
library(plotly)
library(ggplot2)
summary(mtcars[1:4])
# Chunk 2: S1
library(plotly)
q  <- qplot(x=hp, y=disp, data=mtcars)
ggplotly(q)
# Chunk 3: S2
p = plot_ly(x = mtcars$cyl, y = mtcars$mpg, data=mtcars)
htmlwidgets::saveWidget(as.widget(p), file = "demo.html")
htmlwidgets::appendContent(as.widget(p))
p = plot_ly(x = mtcars$cyl, y = mtcars$mpg, data=mtcars)
class(p)
str(plotly)
str(p)
p = plot_ly(x = mtcars$cyl, y = mtcars$mpg, data=mtcars,
name="plot1",
width = 400,
height = 200)
htmlwidgets::createWidget(x = as.widget(p), name="plot1")
htmlwidgets::createWidget(x = p, name="plot1")
p = plot_ly(x = mtcars$cyl, y = mtcars$mpg, data=mtcars,
name="plot1",
width = 400,
height = 200)
htmltools::renderDocument(as.widget(p))
htmltools::renderDocument(p)
htmltools::tagList(list(p, p))
p = plot_ly(x = mtcars$cyl, y = mtcars$mpg, data=mtcars)
htmlwidgets::saveWidget(as.widget(p), file = "demo.html")
htmltools::tagList(list(p, q))
p  <- plot_ly(x = mtcars$cyl, y = mtcars$mpg, data=mtcars)
htmltools::tagList(list(p, p))
list(p)
list(p,p)
p  <- plot_ly(x = mtcars$cyl, y = mtcars$mpg, data=mtcars, type="scatter")
htmltools::doRenderTags(list(p))
?htmltools
?htmltools::doRenderTags
el <- div(HTML("I like <u>turtles</u>"))
cat(as.character(el))
el
el()
subplot(p)
setwd("~/GitHub/Developing_Data_Products")
con
opts_knit
knit_opts
library(knitr)
opts_knit
opts_knit$get()
opts_knit$set(base.dir = "~/GitHub/Developing_Data_Products")
opts_knit$set(base.url = "file://week3.html")
opts_knit$set(verbose=TRUE)
rmarkdown::run("plotly.Rpres")
setwd("~/GitHub/leaflet assignment")
?knitr::knit
knit_with_parameters('~/GitHub/leaflet assignment/week3.Rmd')
install.packages("slidify")
library(devtools)
install_github("slidify", "ramnathv")
install_github("ramnathv/slidifyLibraries")
library(slidify)
library(slidifyLibraries)
slidify("week3.Rpres")
gc()
browseURL("demo.html")
gr <- browseURL("demo.html")
str(gr)
gr
class(gr)
install.packages("rCharts")
install.packages("rChart")
install.packages("rcharts")
??rCharts
opts_chunk$set(comment = NA, results = 'asis', comment = NA, tidy = F)
p = plot_ly(x = mtcars$cyl, y = mtcars$mpg, data=mtcars)
htmlwidgets::saveWidget(as.widget(p), file = "demo.html")
p$show()
library(plotly)
p = plot_ly(x = mtcars$cyl, y = mtcars$mpg, data=mtcars)
p
p = plot_ly(x = mtcars$cyl, y = mtcars$mpg, data=mtcars, xlab="MPG")
p
p = plot_ly(x = mtcars$cyl, y = mtcars$mpg, data=mtcars, type="scatter")
p
p = plot_ly(x = mtcars$cyl, y = mtcars$mpg, data=mtcars)
p
p = qplot(x = mtcars$cyl, y = mtcars$mpg, data=mtcars, ylab="MPG", xlab="CYL")
p
p = qplot(x = mtcars$cyl, y = mtcars$mpg, data=mtcars, ylab="MPG", xlab="CYL", title="Scatter Plot of cyl vs mpg in mtcars")
p = qplot(x = mtcars$cyl, y = mtcars$mpg, data=mtcars, ylab="MPG", xlab="CYL", main="Scatter Plot of cyl vs mpg in mtcars")
p
ggplotly(p)
opts_chunk$set(comment = NA, results = 'asis', comment = NA, tidy = F)
p = qplot(x = mtcars$cyl, y = mtcars$mpg, data=mtcars, ylab="MPG", xlab="CYL", main="Scatter Plot of cyl vs mpg in mtcars")
ggplotly(p)
knitr::knit('week3.Rpres', 'week3.md')
markdown::markdownToHTML("week3.md", "week3.html")
library(slidify)
slidify(inputFile = "week3slidify.Rmd")
slidify()
author("DDP_Week3Slides")
library(googleVis)
setwd("~/GitHub/DataProductsFinal")
library(quantmod)
getSymbols(c("AAPL","GOOG","FB","NFLX")
)
View(AAPL)
sym <- "AAPL"
df <- eval(sym)
df <- sym
df <- expresion(sym)
df <- expr(sym)
df <- as.name(sym)
df
View(df)
head(df)
df %>% select()
library(dplyr)
df %>% select()
as.name(df) %>% select()
View(df)
subset(df)
subset(df, 1:10)
subset(df, 4=4)
subset(df, 4==4)
do.call(df)
eval(paste(df))
eval(df)
eval(df[6])
eval(df)[,6]
adjPrice <-eval(df)[,6]
class(adjPrice)
auto.arima(adjprice)
library(forecast)
auto.arima(adjprice)
auto.arima(adjPrice)
forecast(auto.arima(adjPrice),h=1)
forecast(auto.arima(adjPrice),h=1)[1]
forecast(auto.arima(adjPrice),h=1)[2]
forecast(auto.arima(adjPrice),h=1)[3]
forecast(auto.arima(adjPrice),h=1)[4]
as.numeric(forecast(auto.arima(adjPrice),h=1)[4])
shiny::runApp('StockPrediction')
runApp('StockPrediction')
df
adjPrice <- eval(df)[,6]
colnames(adjPrice) <- "Close"
ggplot() +
geom_line(data = adjPrice, aes(x = Date, y = Close)) +
ylab('Daily Close for the selected stock symbol')
ggplot() +
geom_line(data = adjPrice, aes(y = Close)) +
ylab('Daily Close for the selected stock symbol')
ggplot() +
geom_line(data = adjPrice, aes(y = Close)) +
ylab('Daily Close for the selected stock symbol')
ggplot(data = adjPrice, aes(y = Close)) +
ylab('Daily Close for the selected stock symbol')
ggplot(data = adjPrice, aes(y = Close)) +
ylab('Daily Close for the selected stock symbol') +geom_point
ggplot(data = adjPrice, aes(y = Close)) +
ylab('Daily Close for the selected stock symbol') +geom_line()
ggplot(data = adjPrice, aes(x=rownames(adjPrice), y = Close)) +
ylab('Daily Close for the selected stock symbol') +geom_line()
rownames(adjPrice)
adjPrice
names(adjPrice)
head(adjPrice)
plot(adjPrice)
plot(adjPrice, main="Close Prices for the Stock")
runApp('StockPrediction')
adjPrice
auto.arima(adjPrice)
forecast(auto.arima(adjPrice))
plot(forecast(auto.arima(adjPrice)))
plot(forecast(auto.arima(adjPrice),h=2))
plot(forecast(auto.arima(adjPrice),h=4))
plot(forecast(auto.arima(adjPrice),h=40))
plot(forecast(auto.arima(adjPrice),h=2))
forecast(auto.arima(adjPrice),h=2)
runApp('StockPrediction')
