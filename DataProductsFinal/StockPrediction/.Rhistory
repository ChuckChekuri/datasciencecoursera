if (!require("devtools")) install.packages("devtools")
devtools::install_github("PMassicotte/gtrendsR")
library(gtrendsR)
user <- "chuckstjoe@gmail.com"
psw <- "RStudioP@ssw0rd"
gconn <- gconnect(user, psw, verbose=TRUE)
detach("package:gtrendsR", unload=TRUE)
devtools::install_github("PMassicotte/gtrendsR")
devtools::install_github("PMassicotte/gtrendsR", force=TRUE)
library(gtrendsR)
res <- gtrends(c("nhl", "nba"), geo = c("CA", "US"))
install.packages(c("forecast", "gss", "qap", "tm"), lib="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
remove(gtrendsR)
detach("package:gtrendsR", unload=TRUE)
remove.packages(gtrendsR)
remove.packages("gtrendsR")
remove.packages("qap")
remove.packages("tm")
library(tm)
detach(tm, unload=TRUE)
detach("package:tm", unload=TRUE)
detach(tm, unload=TRUE)
library("tm", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
detach("package:tm", unload=TRUE)
remove.packages(tm)
remove.packages("tm")
remove.packages("tm",lib="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("qap", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
detach("package:qap", unload=TRUE)
remove.packages("qap",lib="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
devtools::install_github("PMassicotte/gtrendsR", force=TRUE)
library("gtrendsR", lib.loc="~/Library/R/3.3/library")
?gconnect
?gtrends
remove.packages("gtrendsR", lib="/Users/chekuric1/Library/R/3.3/library")
res <- gtrends(c("nhl", "nba"), geo = c("CA", "US"))
remove.packages("gtrendsR", lib="/Users/chekuric1/Library/R/3.3/library")
library(gtrendsR)
install.packages("gtrendsR")
library("gtrendsR", lib.loc="~/Library/R/3.3/library")
res <- gtrends(c("nhl", "nba"), geo = c("CA", "US"))
remove.packages("gtrendsR", lib="/Users/chekuric1/Library/R/3.3/library")
devtools::install_github("PMassicotte/gtrendsR")
devtools::install_github("PMassicotte/gtrendsR", force=TRUE)
library(swirl)
swirl()
6
dim(InsectSprays)
head(InsectSprays,n = 15)
sA
summary(InsectSprays$spray)
summary(InsectSprays[,2])
sapplu(InsectSprays,class)
sapply(InsectSprays,class)
fit <- lm(count~ spray, data=InsectSprays)
fit$coefficients
summary(fit)$coef
est <- summary(fit)$coef[,1]
mean(sA)
mean(sB)
nfit <- lm( count~ spray -1, data=InsectSprays)
summary(nfit)$coef[,2]
summary(nfit)$coef
spray2 <- relevel(InsectSprays$spray, "sprayC")
spray2 <- relevel(InsectSprays$spray, sprayC)
spray2 <- relevel(InsectSprays$spray, C)
spray2 <- relevel(InsectSprays$spray, "C")
fit2 <- lm(count, spray, data=spray2)
fit2 <- lm(count, spray2, data=InsectSprays)
fit2 <- lm(count ~ spray2, data=InsectSprays)
summary(fit2)$coef
mean(sC)
(fit2$coef[2] - fit2$coef[3])/1.6011
(fit$coef[2] - fit$coef[3])/1.6011
dim(hunger)
948
names(hunger)
fit <- lm(Numeric~Year, data=hunger)
summary(fit)$coef
lmf <- lm(Numeric ~Year, data=hunger[hunger$Sex == 'Female'])
lmf <- lm(Numeric ~Year, data=hunger[hunger$Sex == "Female"])
lmf <- lm(Numeric ~Year, data=hunger[hunger$sex == "Female"])
lmf <- lm(Numeric~Year, data=hunger[hunger$sex=="Female"])
lmf <- lm(Numeric~Year, data=hunger[hunger$sex=="Female",])
lmf <- lm(Numeric~Year, data=hunger[,hunger$sex=="Female"])
hunger
lmF <- lm(Numeric[Sex=="Female"] ~ Year[Sex=="Female"],hunger)
lmM <- lm(Numeric[Sex=="MALE"] ~ Year[Sex=="Male"],hunger)
lmM <- lm(Numeric[Sex=="Male"] ~ Year[Sex=="Male"],hunger)
lmBoth <- lm(Numeric + Sex + Year, hunger)
lmBoth <- lm(Numeric ~ Sex + Year, hunger)
summary(lmBoth)
lmInter <- lm(Numeric ~ Year + Sex + Sex*Year, hunger)
summary(lmInter)
fit <- lm(y~x, out2)
plot(fit, which=1)
fitno <- lm(y~x, out2[-1,])
plot(fitno, which=1)
coef(fit) - coef(fitno)
View(dfbeta(fit))
resno <- out2[1, "y"] - predict(fitno, out2[1,])
1-resid(fit)[1]/resno
head(hatvalues(fit))
sigma <- sqrt(sum(fit$residuals^2)/fit$df.residual)
resid(fit)/(sigma*sqrt(1-hatvalues(fit)))
rstd <- resid(fit)/(sigma * sqrt(1-hatvalues(fit)))
head(cbind(rstd, rstandard(fit)))
plot(fit, which=3)
plot(fit, which=2)
sigma1 <- sqrt(sum(fitno$residuals^2)/fitno$df.residual)
resid(fitno)[1]/(sigma1 * sqrt(1-hatvalues(fit)[1]))
resid(fit)[1]/(sigma1 * sqrt(1-hatvalues(fit)[1]))
head(rstudent(fit))
dy <- predict(fitno, out2) - predict(fit, out2)
sum(dy^2)/(2*sigm^2)
sum(dy^2)/(2*sigma^2)
plot(fit, which=5)
install.packages("~/Downloads/AppliedPredictiveModeling_1.1-6.tar", repos = NULL)
install.packages("~/Downloads/AppliedPredictiveModeling_1.1-6.tar")
train <- read.csv("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv", stringsAsFactors = FALSE, row.names = X)
train <- read.csv("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv", stringsAsFactors = FALSE, row.names = "X")
test <- read.csv("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv", stringsAsFactors = FALSE, row.names = "X")
vars <- dim(train)[2]
nzv <- nearZeroVar(train[,1:158], saveMetrics = TRUE )
library(caret)
nzv <- nearZeroVar(train[,1:158], saveMetrics = TRUE )
train_nzv <- train[c(rownames(nzv[nzv$nzv ==FALSE,])) ]
dim(train_nzv)
train_pred <- train[,6:99]
train_pred <- train[,6:98]
train_clean <- train_pred[ , apply(train_pred, 2, function(x) !any(is.na(x)))]
dim(train_clean)
colnames(train_clean)
pmatrix <- scale(train_clean)
head(train_clean)
str(train_clean)
train_pred <- train_pred[ , apply(train_pred, 2, as.numeric]
train_clean <- train_pred[ , apply(train_pred, 2, function(x) !any(is.na(x)))]
dim(train_clean)
colnames(train_clean)
pmatrix <- scale(train_clean)
princ  <- prcomp(pmatrix)
pairs(train_clean)
princ$rotation
```
train_pred <-  apply(train_pred, 2, as.numeric)
train_clean <- train_pred[ , apply(train_pred, 2, function(x) !any(is.na(x)))]
dim(train_clean)
colnames(train_clean)
gc()
princ  <- prcomp(pmatrix)
pmatrix <- scale(train_clean)
princ  <- prcomp(pmatrix)
princ$rotation
train_df <- cbind(class_var, train_clean)
class_var <- train[,"classe"]
train_df <- cbind(class_var, train_clean)
train_df
train_clean
train_df <- as.data.frame(class_var, train_clean)
train_df <- as.data.frame(class_var[1], train_clean)
train_df <- data.frame(class_var, train_clean)
train_df
fit_rpart <- train(classe ~ ., data = train+df, method = "rpart", trControl = control)
control <- trainControl(method = "cv", number = 5)
fit_rpart <- train(classe ~ ., data = train+df, method = "rpart", trControl = control)
fit_rpart <- train(classe ~ ., data = train_df, method = "rpart", trControl = control)
train_df <- data.frame(classe=class_var, train_clean)
train_df
fit_rpart <- train(classe ~ ., data = train_df, method = "rpart", trControl = control)
print(fit_rpart, digits = 4)
control <- trainControl(method = "cv", number = 10)
fit_rpart <- train(classe ~ ., data = train_df, method = "rpart", trControl = control)
print(fit_rpart, digits = 4)print(fit_rpart, digits = 4)
print(fit_rpart, digits = 4)
m_rf <- train(classe ~. , train_clean, method="rf", trControl = control)
m_rf <- train(classe ~. , train_df, method="rf", trControl = control)
m_gbm <- train(classe ~. , train_df, method="gbm", trControl = control)
m_lda <- train(classe ~. , train_df, method="lda", trControl = control)
m_lda
p_rf   <- predict(m_rf, test)
p_gbm  <- predict(m_gbm, test)
p_lda  <- predict(m_lda, test)
p_rp   <- predict(fit_rpart, test)
stackedDF <- data.frame(p_rf, p_gbm, p_lda, p_rp, classe = test$classe)
p_rp
p_rf
p_gbm
p_lda
test$classe
test
confusionMatrix(p_rf, testing$diagnosis)$overall[1]
confusionMatrix(p_rp,  test$classe)$overall[1]
fancyRpartPlot(fit_rpart$finalModel)
??fancyRpartPlot
library(rattle)
fancyRpartPlot(fit_rpart$finalModel)
library(rpart)
fancyRpartPlot(fit_rpart$finalModel)
rpart::plotcp(fit_rpart)
rpart::plotcp(fit_rpart$finalModel)
rpart::plotcp(fit_rpart$results)
str(fit_rpart)
fit_rpart$finalModel
class(fit_rpart$finalModel)
fancyRpartPlot(fit_rpart$finalModel)
?rpart.plot
??rpart.plot
rattle::rattle.print.summary.multinom(fit_rpart$finalModel,digits=3)
gc()
library(caretEnsemble)
library(caretEnsamble)
install.packages("caretEnsemble")
library(caretEnsemble)
caretList(trControl=control)
caretList(trControl=control, tuneList = c(fit_rpart, m_rf, m_gbm, m_lda))
models = c(fit_rpart, m_rf, m_gbm, m_lda)
caretEnsemble(models)
control <- trainControl(method="repeatedcv", number=10, repeats=3, savePredictions=TRUE, classProbs=TRUE)
algorithmList <- c('lda', 'rpart', 'glm', 'knn', 'svmRadial')
set.seed(5304)
models <- caretList(Class~., data=train_df, trControl=control, methodList=algorithmList)
models <- caretList(classe~., data=train_df, trControl=control, methodList=algorithmList)
warnings()
control <- trainControl(method="repeatedcv", number=10, repeats=3, savePredictions=TRUE, classProbs=TRUE)
algorithmList <- c('lda', 'rpart', 'gbm', 'knn', 'svmRadial')
set.seed(5304)
models <- caretList(classe~., data=train_df, trControl=control, methodList=algorithmList)
models
summary(models)
results <- resamples(models)
summary(results)
dotplot(results)
modelCor(results)
modelCor(na.omit(results))
str(results)
?modelCor
sort(results, FUN=mean, na.rm=TRUE
)
sort(results, FUN=mean)
sort(results, FUN=mean, na.rm=TRUE)
modelCor(results, metric="accuracy")
modelCor(results, metric="Accuracy")
modelCor(results, metric="Kappa")
results$values
apply(results, 2, function(x){sapply(x,ifelse(is.na(x),0,x))})
apply(results, 2, function(x){lapply(x,ifelse(is.na(x),0,x))})
apply(results$values, 2, function(x){lapply(x,ifelse(is.na(x),0,x))})
apply(results$values, 2, FUN=function(x)lapply(x,ifelse(is.na(x),0,x)))
apply(results$values, 2, FUN=function(x)lapply(x,function(y)ifelse(is.na(y),0,y)))
apply(results$values, 2, FUN=function(x)sapply(x,function(y)ifelse(is.na(y),0,y)))
apply(results$values, 2, FUN=function(x)sapply(x,function(y)ifelse(is.na(y),0L,as.numeric(y)))
)
apply(results$values[1,10], 2, FUN=function(x)sapply(x,function(y)ifelse(is.na(y),0L,as.numeric(y)))
)
apply(results$values, 2, FUN=function(x)sapply(x,function(y)ifelse(is.na(y),0L,as.numeric(y))))
xx <- apply(results$values, 2, FUN=function(x)sapply(x,function(y)ifelse(is.na(y),0L,as.numeric(y))))
modelCor(xx)
pairs(xx)
modelCor(results)
splom(results)
stackControl <- trainControl(method="repeatedcv", number=10, repeats=3, savePredictions=TRUE, classProbs=TRUE)
set.seed(786)
stack.glm <- caretStack(models, method="glm", metric="Accuracy", trControl=stackControl)
print(stack.glm)
stack.glm <- caretStack(models, method="rf", metric="Accuracy", trControl=stackControl)
check_caretList_model_types(models)
caretEnsemble::check_caretList_model_types(models)
stack.glm <- caretStack(models, method="rpart", metric="Accuracy", trControl=stackControl)
?caretStack
confusionMatrix(p_rp,  train_df$classe)$overall[1]
confusionMatrix(p_rf,  train_df$classe)$overall[1]
confusionMatrix(p_gbm, train_df$classe)$overall[1]
confusionMatrix(p_lda, train_df$classe)$overall[1]
print(models[1])
preds <- lapply(models, function(x)predict(x, test))
preds
stackControl <- trainControl(method="cv", number=10, savePredictions=TRUE, classProbs=TRUE)
stack.glm <- caretStack(models, method="rpart", metric="Accuracy", trControl=stackControl)
stack.glm <- caretStack(models, method="rpart", metric="Accuracy")
stack.glm <- caretStack(models)
ensemble <- caretEnsemble(models)
ensemble <- caretEnsemble(models[3:5])
summary(models)
mod1 <- models[3,4,5]
mod1 <- models[3:5]
ensemble <- caretEnsemble(mod1)
summary(mod1)
str(mod1)
fancyRpartPlot(m_rf)
fancyRpartPlot(m_rf$finalModel)
print(models)
print(models$rpart)
print(models$lda)
print(models$svmRadial)
str(models$svmRadial)
models$rpart$modelType
models$lda$modelType
models$gbm$modelType
models$svmRadial$modelType
models$rpart$modelType
models$rf$modelType
models$rf$resamples
models$resamples
models$resample
models$rpart$resample
models$rf$resamples$accuracy
models$rf$resamples$Accuracy
models$rf$resample$Accuracy
models$rpart$resample$Accuracy
summary(models$rpart$resample$Accuracy)
summary(models$gbm$resample$Accuracy)
summary(models$svmRadial$resample$Accuracy)
preds
preds_train <- lapply(models, function(x)predict(x, train_df))
head(preds)
summary(preds)
summary(preds_train)
stackdf <- data.frame(preds_train, classe = train_df$classe)
head(stackdf)
rf_fit <- train(classe ~ ., method = "rf", data = stackdf)
summary(results)
models$gbm$results$Accuracy
mean(models$gbm$results$Accuracy)
summary(models$gbm$resample$Accuracy)
mean(models$gbm$resample$Accuracy)
mean(models$gbm$resample$Accuracy)*100
dotplot(results)
splom(results)
sample(1:nrow(train_df))
sample(1:nrow(train_df), size = 60)
validClassSample <- train_df[sample(1:nrow(train_df), size=60),"classe"]
validClassSample
StackSample <- train_df[sample(1:nrow(train_df), size=60),]
StackSample
stackSample <- train_df[sample(1:nrow(train_df), size=60),]
stackPreds <- lapply(models, function(x)predict(x, stackSample))
stackControl <- trainControl(method="cv", number=10, savePredictions=TRUE, classProbs=TRUE)
stackSample$classe
stackDf <- data.frame(stackPreds, classe = stackSample$classe)
rf_fit <- train(classe ~ ., method = "rf", data = stackDf)
new_p <- predict(rf_fit, stackdf)
new_p
new_p <- predict(rf_fit, stackDf)
rf_fit
stackSample <- train_df[sample(1:nrow(train_df), size=100),]
stackPreds <- lapply(models, function(x)predict(x, stackSample))
stackDf <- data.frame(stackPreds, classe = stackSample$classe)
rf_fit <- train(classe ~ ., method = "rf", data = stackDf)
print(rf_fit)
accuracy(rf_fit)
accuracy(rf_fit$finalModel)
Accuracy(rf_fit$finalModel)
forecast::accuracy(rf_fit)
str(rf_fit)
rf_fit$resample$Accuracy
mean(rf_fit$resample$Accuracy)
finalSubPreds <- data.frame(lapply(models, function(x)predict(x, test)))
finalSubPreds
predict(rf_fit, finalSubPreds)
summary(train)
train <- read.csv("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv", stringsAsFactors = FALSE, row.names = "X", na.strings = c("NA", ""))
summary(train)
summary(as.factor(train$amplitude_yaw_dumbbell))
train <- read.csv("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv", stringsAsFactors = FALSE, row.names = "X", na.strings = c("NA", "","#DIV/0!"))
summary(as.factor(train$amplitude_yaw_dumbbell))
vars <- dim(train)[2]
vars
class_var <- train[,"classe"]
nzv <- nearZeroVar(train[,1:158], saveMetrics = TRUE )
library(caret, warn.conflicts = FALSE, quietly = TRUE)
class_var <- train[,"classe"]
nzv <- nearZeroVar(train[,1:158], saveMetrics = TRUE )
train_nzv <- train[c(rownames(nzv[nzv$nzv ==FALSE,])) ]
dim(train_nzv)
summary(train_nzv)
nzv
str(train_nzv)
har_data <- read.csv("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv", stringsAsFactors = FALSE, row.names = "X", na.strings = c("NA", "","#DIV/0!"))
test <- read.csv("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv", stringsAsFactors = FALSE, row.names = "X", na.strings = c("NA","","#DIV/0!"))
raw_predictors <- har_data[,7:158]
response <- train[,159]
str(raw_predictors)
str(response)
predictors <- raw_predictors[ , apply(raw_predictors, 2,
function(x) !any(is.na(x)))]
str(predictors)
dim(predictors)
predictors_nzv <- raw_predictors[ , apply(raw_predictors, 2,
function(x) !any(is.na(x)))]
nzv <- nearZeroVar(predictors_nzv, saveMetrics = TRUE )
nzv
predictors <- predictors_nzv[c(rownames(nzv[nzv$nzv ==FALSE,])) ]
dim(predictors)
control <- trainControl(method="repeatedcv", number=10, repeats=3, classProbs=TRUE)
algorithmList <- c('lda', 'gbm', 'knn', 'svmRadial')
set.seed(5304)
models <- caretList(response~predictors, trControl=control, methodList=algorithmList)
knitr::opts_chunk$set(echo = TRUE)
library(caret, warn.conflicts = FALSE, quietly = TRUE)
library(caretEnsemble, warn.conflicts = FALSE, quietly = TRUE)
library(MASS, warn.conflicts = FALSE, quietly = TRUE)
library(gbm, warn.conflicts = FALSE, quietly = TRUE)
library(splines, warn.conflicts = FALSE, quietly = TRUE)
library(plyr, warn.conflicts = FALSE, quietly = TRUE)
library(randomForest, warn.conflicts = FALSE, quietly = TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(caret, warn.conflicts = FALSE, quietly = TRUE)
library(caretEnsemble, warn.conflicts = FALSE, quietly = TRUE)
library(survival, warn.conflicts = FALSE, quietly = TRUE)
library(MASS, warn.conflicts = FALSE, quietly = TRUE)
library(gbm, warn.conflicts = FALSE, quietly = TRUE)
library(splines, warn.conflicts = FALSE, quietly = TRUE)
library(plyr, warn.conflicts = FALSE, quietly = TRUE)
library(randomForest, warn.conflicts = FALSE, quietly = TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(caret, warn.conflicts = FALSE, quietly = TRUE)
library(caretEnsemble, warn.conflicts = FALSE, quietly = TRUE)
library(survival, warn.conflicts = FALSE, quietly = TRUE)
library(MASS, warn.conflicts = FALSE, quietly = TRUE)
library(gbm, warn.conflicts = FALSE, quietly = TRUE)
library(splines, warn.conflicts = FALSE, quietly = TRUE)
library(plyr, warn.conflicts = FALSE, quietly = TRUE)
library(randomForest, warn.conflicts = FALSE, quietly = TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(caret, warn.conflicts = FALSE, quietly = TRUE)
library(caretEnsemble, warn.conflicts = FALSE, quietly = TRUE)
library(survival, warn.conflicts = FALSE, quietly = TRUE)
library(MASS, warn.conflicts = FALSE, quietly = TRUE)
library(gbm, warn.conflicts = FALSE, quietly = TRUE)
library(splines, warn.conflicts = FALSE, quietly = TRUE)
library(plyr, warn.conflicts = FALSE, quietly = TRUE)
library(randomForest, warn.conflicts = FALSE, quietly = TRUE)
gc()
knitr::opts_chunk$set(echo = TRUE)
library(caret, warn.conflicts = FALSE, quietly = TRUE)
library(caretEnsemble, warn.conflicts = FALSE, quietly = TRUE)
library(survival, warn.conflicts = FALSE, quietly = TRUE)
library(MASS, warn.conflicts = FALSE, quietly = TRUE)
library(gbm, warn.conflicts = FALSE, quietly = TRUE)
library(splines, warn.conflicts = FALSE, quietly = TRUE)
library(plyr, warn.conflicts = FALSE, quietly = TRUE)
library(randomForest, warn.conflicts = FALSE, quietly = TRUE)
har_data <- read.csv("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv", stringsAsFactors = FALSE, row.names = "X", na.strings = c("NA", "","#DIV/0!"))
test <- read.csv("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv", stringsAsFactors = FALSE, row.names = "X", na.strings = c("NA","","#DIV/0!"))
raw_predictors <- har_data[,7:158]
response <- train[,159]
predictors_nzv <- raw_predictors[ , apply(raw_predictors, 2,
function(x) !any(is.na(x)))]
nzv <- nearZeroVar(predictors_nzv, saveMetrics = TRUE )
predictors <- predictors_nzv[c(rownames(nzv[nzv$nzv ==FALSE,])) ]
# remove the identifiers and dates from prediction vars
control <- trainControl(method="repeatedcv", number=10, repeats=3, classProbs=TRUE)
algorithmList <- c('lda', 'gbm', 'knn', 'svmRadial')
set.seed(5304)
models <- caretList(response~predictors, trControl=control, methodList=algorithmList)
results <- resamples(models)
df <- data.frame(classe=response, predictors)
response <- train[,159]
response <- har_data[,159]
raw_predictors <- har_data[,7:158]
knitr::opts_chunk$set(echo = TRUE)
library(caret, warn.conflicts = FALSE, quietly = TRUE)
library(caretEnsemble, warn.conflicts = FALSE, quietly = TRUE)
library(survival, warn.conflicts = FALSE, quietly = TRUE)
library(MASS, warn.conflicts = FALSE, quietly = TRUE)
library(gbm, warn.conflicts = FALSE, quietly = TRUE)
library(splines, warn.conflicts = FALSE, quietly = TRUE)
library(plyr, warn.conflicts = FALSE, quietly = TRUE)
library(randomForest, warn.conflicts = FALSE, quietly = TRUE)
har_data <- read.csv("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv", stringsAsFactors = FALSE, row.names = "X", na.strings = c("NA", "","#DIV/0!"))
test <- read.csv("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv", stringsAsFactors = FALSE, row.names = "X", na.strings = c("NA","","#DIV/0!"))
raw_predictors <- har_data[,7:158]
response <- har_data[,159]
predictors_nzv <- raw_predictors[ , apply(raw_predictors, 2,
function(x) !any(is.na(x)))]
nzv <- nearZeroVar(predictors_nzv, saveMetrics = TRUE )
predictors <- predictors_nzv[c(rownames(nzv[nzv$nzv ==FALSE,])) ]
control <- trainControl(method="repeatedcv", number=10, repeats=3, classProbs=TRUE)
algorithmList <- c('lda', 'gbm', 'knn', 'svmRadial')
set.seed(5304)
df <- data.frame(classe=response, predictors)
models <- caretList(classe~. data=df, trControl=control, methodList=algorithmList)
results <- resamples(models)
control <- trainControl(method="repeatedcv", number=10, repeats=3, classProbs=TRUE)
algorithmList <- c('lda', 'gbm', 'knn', 'svmRadial')
set.seed(5304)
df <- data.frame(classe=response, predictors)
models <- caretList(classe~., data=df, trControl=control, methodList=algorithmList)
gc()
gc(reset=T)
gc()
control <- trainControl(method="cv", number=5, classProbs = TRUE)
gc()
knitr::opts_chunk$set(echo = TRUE)
library(caret, warn.conflicts = FALSE, quietly = TRUE)
library(caretEnsemble, warn.conflicts = FALSE, quietly = TRUE)
library(survival, warn.conflicts = FALSE, quietly = TRUE)
library(MASS, warn.conflicts = FALSE, quietly = TRUE)
library(gbm, warn.conflicts = FALSE, quietly = TRUE)
library(splines, warn.conflicts = FALSE, quietly = TRUE)
library(plyr, warn.conflicts = FALSE, quietly = TRUE)
library(randomForest, warn.conflicts = FALSE, quietly = TRUE)
har_data <- read.csv("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv", stringsAsFactors = FALSE, row.names = "X", na.strings = c("NA", "","#DIV/0!"))
test <- read.csv("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv", stringsAsFactors = FALSE, row.names = "X", na.strings = c("NA","","#DIV/0!"))
raw_predictors <- har_data[,7:158]
response <- har_data[,159]
predictors_nzv <- raw_predictors[ , apply(raw_predictors, 2,
function(x) !any(is.na(x)))]
setwd("/Volumes/DocsOnFDrive/ProjectsOnDesktop/nurseApp")
setwd("~/GitHub/DataProductsFinal/StockPrediction")
shiny::runApp()
